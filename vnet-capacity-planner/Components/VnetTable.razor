@using System.Net
@using vnet_capacity_planner.Models
@inject VirtualNetwork Vnet
@inject ConfirmService _confirmService

<Table @ref="vnetTable" TItem="IPRange" DataSource="@Vnet.IPRanges" HidePagination="true">
    <Column Title="Network IP" Field="@context.StartIP">
        <input class="ant-input" value="@startIp" @onchange="@(async (e) => await StartIpChanged(e))"
               maxlength=15 @onfocus="StartIpFocus" />
    </Column>
    <Column Title="Address Space" Field="@context.AddressSpace" />
    <Column Title="Address Range" Field="@context.AddressRange" />
    <Column Title="Address Count" Field="@context.AddressCount" />
</Table>
@if (showError)
{
    <ValidationError ErrorMessage="@errorMessage" />
}

@code {
    private string startIp = "";
    private bool showError = false;
    private string errorMessage = "";

    Table<IPRange> vnetTable;

    protected override void OnInitialized()
    {
        startIp = Vnet.IPRanges[0].StartIP;

        Vnet.OnSubnetChange += SubnetHasChanged;

        base.OnInitialized();
    }

    public void Dispose()
    {
        Vnet.OnSubnetChange -= SubnetHasChanged;
    }

    private void SubnetHasChanged() => vnetTable.ReloadData();

    private async Task StartIpChanged(ChangeEventArgs e)
    {
        IPAddress ipAddress = null;
        bool validIp = IPAddress.TryParse(e.Value?.ToString(), out ipAddress);
        if (!validIp)
        {
            errorMessage = "IP address is not valid.";
            showError = !validIp;
            return;
        }

        IPNetwork network1 = IPNetwork.Parse("10.0.0.0/8");
        IPNetwork network2 = IPNetwork.Parse("172.16.0.0/12");
        IPNetwork network3 = IPNetwork.Parse("192.168.0.0/16");

        if (!network1.Contains(ipAddress) && !network2.Contains(ipAddress) && !network3.Contains(ipAddress))
        {
            errorMessage = $"IP address is not recommended. " +
                    $"<a href=\"https://docs.microsoft.com/en-us/azure/virtual-network/virtual-networks-faq#what-address-ranges-can-i-use-in-my-vnets\" target=\"_blank\">More info</a>";
            showError = true;
            return;
        }

        string newIp = e.Value.ToString();

        if (Vnet.Subnets.Count > 0 && newIp != Vnet.GetVnetStartIp(0))
        {
            var content = "Chaning network IP will reset all subnets!";
            var title = "Warning";
            var confirmResult = await _confirmService.Show(content, title, ConfirmButtons.OKCancel, ConfirmIcon.Warning);
            if (confirmResult == ConfirmResult.OK)
            {
                Vnet.SetVnetStartIp(0, newIp);
                Vnet.ResetSubnets();
            }
            else
                e.Value = startIp;
        }
        else
            Vnet.SetVnetStartIp(0, newIp);
    }


    private void StartIpFocus(FocusEventArgs e)
    {
        if (showError)
            showError = false;
    }
}
