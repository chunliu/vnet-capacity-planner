@inject VirtualNetwork _vnet

<Button Type="primary" Icon="plus-circle" OnClick="@AddSubnetClick">Add Subnet</Button>
<p />
<Table @ref="subnetTable" TItem="Subnet" DataSource="@_vnet.Subnets" HidePagination="true">
    <Column @bind-Field="@context.Name" />
    <Column Title="Azure Resource" Field="@context.ServiceName">
        @if(context.ServiceName == "Other")
        {
            @context.ServiceName;
        }
        else
        {
            <a href="@context.Service.RefUrl" target="_blank">@context.ServiceName</a>
        }
    </Column>
    <Column Title="Address Space" Field="@context.AddressSpace" />
    <Column Title="Address Range" Field="@context.AddressRange" />
    <Column Title="Address Count" Field="@context.AddressCount" />
    <Column Title="Available Count" Field="@context.AvailableCount" />
    <ActionColumn>
        <Tooltip Title="@("Delete")">
            <Button Icon="delete" Shape="circle" OnClick="@(() => DeleteSubnet(context.Name))" />
        </Tooltip>
    </ActionColumn>
</Table>

@if (subnet == null)
{
    <Modal></Modal>
}
else
{
    <Modal Title="@("Add a subnet")" Visible="@modalVisible" OnOk="@HandleOk" OnCancel="@HandleCancel" OkButtonProps="@(new ButtonProps { Disabled = subnet.Service == null })">
        <Form @ref="@subnetForm" Model="@subnet" LabelCol="new ColLayoutParam { Span = 7 }" WrapperCol="new ColLayoutParam { Span = 17}">
            <ValidationSummary />
            <FormItem Label="Azure Resource">
                <Select DataSource="@_vnet.ServiceSpecs" @bind-Value="@context.ServiceName"
                        ValueName="@nameof(ServiceSpec.Name)" LabelName="@nameof(ServiceSpec.Name)"
                        OnSelectedItemChanged="HandleOnSelectedItemChanged" />
            </FormItem>
            <FormItem Label="Name">
                <Input @bind-Value="@context.Name" Disabled="@(context.Service?.FixedSubnetName ?? false)" />
            </FormItem>
            <FormItem Label="Start Address">
                <Input @bind-Value="@context.StartIP" />
            </FormItem>
            @if (context.Service?.FixedSubnetCidr ?? false)
            {
                <FormItem Label="CIDR">
                    <Input @bind-Value="@context.Service.SubnetCidr" Disabled="@context.Service.FixedSubnetCidr" />
                </FormItem>
            }
            else
            {
                <FormItem Label="Instances">
                    <Input @bind-Value="@context.ServiceInstances" />
                </FormItem>
                <FormItem Label="Address/Instance">
                    <Input @bind-Value="@context.IpPerInstance" Disabled="@((context.Service?.IpPerInstance ?? 0) != 0)" />
                </FormItem>
                <FormItem Label="Additional Addresses">
                    <Input @bind-Value="@context.AdditionalIps" Disabled="@((context.Service?.IpPerInstance ?? 0) != 0)" />
                </FormItem>
            }
        </Form>
    </Modal>
}

@code {
    bool modalVisible = false;

    Form<Subnet> subnetForm;

    Subnet subnet = null;

    Table<Subnet> subnetTable;

    protected override void OnInitialized()
    {
        _vnet.OnSubnetChange += SubnetHasChanged;

        base.OnInitialized();
    }

    public void Dispose()
    {
        _vnet.OnSubnetChange -= SubnetHasChanged;
    }

    private void SubnetHasChanged() => subnetTable.ReloadData();

    private void HandleOnSelectedItemChanged(ServiceSpec selectedService)
    {
        subnet.Service = selectedService;
        subnet.ServiceName = selectedService.Name;
        subnet.Name = selectedService.SubnetName;
        subnet.IpPerInstance = selectedService.IpPerInstance;
        subnet.AdditionalIps = selectedService.AdditionalIps;
    }

    private void AddSubnetClick()
    {
        subnet = new Subnet();
        subnet.ServiceName = string.Empty;
        subnet.VirtualNetwork = _vnet;

        modalVisible = true;
    }

    private void HandleOk(MouseEventArgs e)
    {
        if (!subnetForm.Validate())
            return;

        _vnet.AddSubnet(subnet.Clone());

        modalVisible = false;
        subnet = null;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        modalVisible = false;
        subnet = null;
    }

    private void DeleteSubnet(string subnetName)
    {
        _vnet.DeleteSubnet(subnetName);
    }
}
