<Button Type="primary" Icon="plus-circle" OnClick="@AddSubnetClick">Add Subnet</Button>
<p />
<Table TItem="Subnet" DataSource="@_vnet.Subnets" HidePagination="true">
    <Column @bind-Field="@context.Name" />
    <Column Title="Azure Resource" Field="@context.ServiceName">
        @if(context.ServiceName == "Other")
        {
            @context.ServiceName;
        }
        else
        {
            <a href="@context.Service.RefUrl" target="_blank">@context.ServiceName</a>
        }
    </Column>
    <Column Title="Address Space" Field="@context.AddressSpace" />
    <Column Title="Address Range" Field="@context.AddressRange" />
    <Column Title="Address Count" Field="@context.AddressCount" />
    <Column Title="Available Count" Field="@context.AvailableCount" />
    <ActionColumn>
        <Tooltip Title="@("Delete subnet")">
            <Button Icon="delete" Shape="circle"
                    OnClick="async (e) => {
                                 await Task.Delay(50); // Temp workaround for unexpected exception thrown
                                 _vnet.DeleteSubnet(context);
                             }" />
        </Tooltip>
    </ActionColumn>
</Table>

@if (subnet == null)
{
    <Modal></Modal>
}
else
{
    <Modal Title="@("Add a subnet")" Visible="@modalVisible" OnOk="@HandleOk" OnCancel="@HandleCancel" 
           OkButtonProps="@(new ButtonProps { Disabled = subnet.Service == null || startIpError })">
        <Form @ref="@subnetForm" Model="@subnet" LabelCol="new ColLayoutParam { Span = 7 }" WrapperCol="new ColLayoutParam { Span = 17}">
            <ValidationSummary />
            <FormItem Label="Azure Resource">
                <Select DataSource="@_vnet.ServiceSpecs" @bind-Value="@context.ServiceName"
                        ValueName="@nameof(ServiceSpec.Name)" LabelName="@nameof(ServiceSpec.Name)"
                        OnSelectedItemChanged="HandleOnSelectedItemChanged" />
            </FormItem>
            <FormItem Label="Name">
                <Input @bind-Value="@context.Name" Disabled="@(context.Service?.FixedSubnetName ?? false)" />
            </FormItem>
            <FormItem Label="Start Address">
                <Input @bind-Value="@context.StartIP" OnBlur="StartIpBlur" />
                @if (startIpError)
                {
                    <ValidationError ErrorMessage="@errorMessage" />
                }
            </FormItem>
            @if (context.Service?.FixedSubnetCidr ?? false)
            {
                <FormItem Label="CIDR">
                    <Input @bind-Value="@context.Service.SubnetCidr" Disabled="@context.Service.FixedSubnetCidr" />
                </FormItem>
            }
            else
            {
                <FormItem Label="Instances">
                    <Input @bind-Value="@context.ServiceInstances" />
                </FormItem>
                <FormItem Label="Address/Instance">
                    <Input @bind-Value="@context.IpPerInstance" Disabled="@((context.Service?.IpPerInstance ?? 0) != 0)" />
                </FormItem>
                <FormItem Label="Additional Addresses">
                    <Input @bind-Value="@context.AdditionalIps" Disabled="@((context.Service?.IpPerInstance ?? 0) != 0)" />
                </FormItem>
            }
        </Form>
    </Modal>
}
