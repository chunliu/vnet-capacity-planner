@using vnet_capacity_planner.Models
@inject VirtualNetwork Vnet

<Button Type="primary" Icon="plus-circle" OnClick="@AddSubnetClick">Add Subnet</Button>
<p />
<Table TItem="Subnet" DataSource="@Vnet.Subnets" HidePagination="true">
    <Column @bind-Field="@context.Name" />
    <Column Title="Address Space" Field="@context.AddressSpace" />
    <Column Title="Address Range" Field="@context.AddressRange" />
    <Column Title="Address Count" Field="@context.AddressCount" />
    <Column Title="Available Count" Field="@context.AvailableCount" />
</Table>

<Modal Title="@("Add a subnet")" Visible="@modalVisible" OnOk="@HandleOk" OnCancel="@HandleCancel" OkButtonProps="@(new ButtonProps { Disabled = subnet.Service == null })">
    <Form @ref="@subnetForm" Model="@subnet" LabelCol="new ColLayoutParam { Span = 6 }" WrapperCol="new ColLayoutParam { Span = 18 }">
        <FormItem Label="Service">
            <Select DataSource="@Vnet.ServiceSpecs" @bind-Value="@context.ServiceName"
                    ValueName="@nameof(ServiceSpec.Name)" LabelName="@nameof(ServiceSpec.Name)"
                    OnSelectedItemChanged="HandleOnSelectedItemChanged" />
        </FormItem>
        <FormItem Label="Name">
            <Input @bind-Value="@context.Name" Disabled="@(context.Service?.FixedSubnetName ?? false)" />
        </FormItem>
        <FormItem Label="Start IP">
            <Input @bind-Value="@context.StartIP" />
        </FormItem>
        @if (context.Service?.FixedSubnetCidr ?? false)
        {
            <FormItem Label="CIDR">
                <Input @bind-Value="@context.Service.SubnetCidr" Disabled="@context.Service.FixedSubnetCidr" />
            </FormItem>
        }
        else
        {
            <FormItem Label="Instances">
                <Input @bind-Value="@context.ServiceInstances" />
                @if (context.Service != null && context.Service.MaxInstances > context.Service.MinInstances
                 && (context.ServiceInstances < context.Service.MinInstances || context.ServiceInstances > context.Service.MaxInstances))
                {
                    <ValidationError ErrorMessage="@($"Instances must be between {context.Service.MinInstances} and {context.Service.MaxInstances}.")" />
                }
            </FormItem>
            <FormItem Label="IP / Instance">
                <Input @bind-Value="@context.IpPerInstance" Disabled="@((context.Service?.IpPerInstance ?? 0) != 0)" />
            </FormItem>
            <FormItem Label="Additional IPs">
                <Input @bind-Value="@context.AdditionalIps" Disabled="@((context.Service?.IpPerInstance ?? 0) != 0)" />
            </FormItem>
        }
    </Form>
</Modal>

@code {
    bool modalVisible = false;

    Form<Subnet> subnetForm;

    Subnet subnet = new Subnet();

    private void HandleOnSelectedItemChanged(ServiceSpec selectedService)
    {
        subnet.Service = selectedService;
        subnet.ServiceName = selectedService.Name;
        subnet.Name = selectedService.SubnetName;
        subnet.IpPerInstance = selectedService.IpPerInstance;
        subnet.AdditionalIps = selectedService.AdditionalIps;
    }

    private void AddSubnetClick()
    {
        subnetForm?.Reset();
        subnet.ServiceName = string.Empty;
        subnet.VnetNetwork = Vnet.IPNetwork;

        modalVisible = true;
    }

    private void HandleOk(MouseEventArgs e)
    {
        if (!subnetForm.Validate())
            return;

        Vnet.AddSubnet(subnet.Clone());
        //subnetForm.Reset();
        modalVisible = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        modalVisible = false;
        subnetForm.Reset();
    }
}
